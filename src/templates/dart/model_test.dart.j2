// {{ test_name }} - 테스트 케이스
// 
// 이 파일은 Agent of Flutter에 의해 자동 생성되었습니다.
//

{% if dependencies %}
{% for dependency in dependencies %}
import '{{ dependency }}';
{% endfor %}
{% endif %}

void main() {
  group('{{ model_name }} 클래스 테스트', () {
    final testTime = DateTime(2023, 1, 1, 12, 0);
    
    // 테스트 데이터
    {% for field in fields %}
    final {{ field.name }}Value = {% if field.type == 'String' %}'test{{ field.name|capitalize }}'{% elif field.type == 'int' %}123{% elif field.type == 'double' %}123.45{% elif field.type == 'bool' %}true{% elif field.type == 'DateTime' %}testTime{% else %}'test'{% endif %};
    {% endfor %}
    
    test('생성자 테스트', () {
      final {{ model_name|lower }} = {{ model_name }}(
        {% for field in fields %}
        {{ field.name }}: {{ field.name }}Value,
        {% endfor %}
      );
      
      {% for field in fields %}
      expect({{ model_name|lower }}.{{ field.name }}, {{ field.name }}Value);
      {% endfor %}
    });
    
    test('fromJson 테스트', () {
      final json = {
        {% for field in fields %}
        '{{ field.name }}': {% if field.type == 'DateTime' %}testTime.toIso8601String(){% else %}{{ field.name }}Value{% endif %},
        {% endfor %}
      };
      
      final {{ model_name|lower }} = {{ model_name }}.fromJson(json);
      
      {% for field in fields %}
      expect({{ model_name|lower }}.{{ field.name }}, {{ field.name }}Value);
      {% endfor %}
    });
    
    test('toJson 테스트', () {
      final {{ model_name|lower }} = {{ model_name }}(
        {% for field in fields %}
        {{ field.name }}: {{ field.name }}Value,
        {% endfor %}
      );
      
      final json = {{ model_name|lower }}.toJson();
      
      {% for field in fields %}
      expect(json['{{ field.name }}'], {% if field.type == 'DateTime' %}{{ field.name }}Value.toIso8601String(){% else %}{{ field.name }}Value{% endif %});
      {% endfor %}
    });
    
    test('copyWith 테스트', () {
      final {{ model_name|lower }} = {{ model_name }}(
        {% for field in fields %}
        {{ field.name }}: {{ field.name }}Value,
        {% endfor %}
      );
      
      final updated{{ model_name }} = {{ model_name|lower }}.copyWith(
        {% for field in fields %}{% if loop.first %}
        {{ field.name }}: {% if field.type == 'String' %}'updated{{ field.name|capitalize }}'{% elif field.type == 'int' %}456{% elif field.type == 'double' %}456.78{% elif field.type == 'bool' %}false{% elif field.type == 'DateTime' %}DateTime(2024, 1, 1){% else %}'updated'{% endif %},
        {% endif %}{% endfor %}
      );
      
      // 업데이트된 필드는 새 값을 가져야 함
      {% for field in fields %}{% if loop.first %}
      expect(updated{{ model_name }}.{{ field.name }}, {% if field.type == 'String' %}'updated{{ field.name|capitalize }}'{% elif field.type == 'int' %}456{% elif field.type == 'double' %}456.78{% elif field.type == 'bool' %}false{% elif field.type == 'DateTime' %}DateTime(2024, 1, 1){% else %}'updated'{% endif %});
      {% endif %}{% endfor %}
      
      // 업데이트되지 않은 필드는 원래 값을 유지해야 함
      {% for field in fields %}{% if not loop.first %}
      expect(updated{{ model_name }}.{{ field.name }}, {{ field.name }}Value);
      {% endif %}{% endfor %}
    });
    
    test('equality 테스트', () {
      final {{ model_name|lower }}1 = {{ model_name }}(
        {% for field in fields %}
        {{ field.name }}: {{ field.name }}Value,
        {% endfor %}
      );
      
      final {{ model_name|lower }}2 = {{ model_name }}(
        {% for field in fields %}
        {{ field.name }}: {{ field.name }}Value,
        {% endfor %}
      );
      
      final different{{ model_name }} = {{ model_name }}(
        {% for field in fields %}{% if loop.first %}
        {{ field.name }}: {% if field.type == 'String' %}'different{{ field.name|capitalize }}'{% elif field.type == 'int' %}789{% elif field.type == 'double' %}789.01{% elif field.type == 'bool' %}false{% elif field.type == 'DateTime' %}DateTime(2025, 1, 1){% else %}'different'{% endif %},
        {% else %}
        {{ field.name }}: {{ field.name }}Value,
        {% endif %}{% endfor %}
      );
      
      // 동일한 값을 가진 두 객체는 같아야 함
      expect({{ model_name|lower }}1, {{ model_name|lower }}2);
      
      // 다른 값을 가진 객체는 달라야 함
      expect({{ model_name|lower }}1, isNot(different{{ model_name }}));
    });
  });
} 