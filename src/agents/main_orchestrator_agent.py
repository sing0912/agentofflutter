"""
MainOrchestratorAgent: 전체 Flutter 앱 생성 프로세스를 조정하는 에이전트.

이 에이전트는 에이전트 그룹들의 작업 순서와 실행을 관리합니다.
"""
from google.adk import Agent
from google.adk.tools import FunctionTool
from google.genai.types import Part

from src.agents.model_group.model_group_agent import model_group_agent, \
    register_model_agents
from src.agents.controller_group.controller_group_agent import controller_group_agent, \
    register_controller_agents
from src.agents.webview_group.webview_group_agent import webview_group_agent, \
    register_webview_agents
from src.agents.api_group.api_group_agent import api_group_agent, \
    register_api_agents
from src.agents.tdd_group.tdd_group_agent import tdd_group_agent, \
    register_tdd_agents
from src.agents.security_group.security_group_agent import security_group_agent, \
    register_security_agents
from src.agents.android_group.android_group_agent import android_group_agent, \
    register_android_agents
from src.config.settings import get_agent_config
from src.utils.logger import logger


def initialize_project(app_spec: dict, tool_context) -> dict:
    """
    Flutter 프로젝트 구조를 초기화합니다.

    Args:
        app_spec: 앱 명세 딕셔너리
        tool_context: 도구 컨텍스트

    Returns:
        초기화 결과를 포함하는 딕셔너리
    """
    try:
        # 프로젝트 기본 정보 추출
        app_name = app_spec.get("app_name", "flutter_app")
        app_description = app_spec.get(
            "description",
            "Flutter application generated by Agent of Flutter")

        # pubspec.yaml 생성
        pubspec_content = f"""
name: {app_name}
description: {app_description}
version: 1.0.0+1

environment:
  sdk: ">=3.0.0 <4.0.0"

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2
  provider: ^6.0.5
  http: ^1.1.0
  json_annotation: ^4.8.1
  shared_preferences: ^2.2.0

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0
  build_runner: ^2.4.6
  json_serializable: ^6.7.1

flutter:
  uses-material-design: true
  assets:
    - assets/images/
        """

        pubspec_bytes = pubspec_content.encode("utf-8")
        pubspec_part = Part.from_data(
            data=pubspec_bytes,
            mime_type="text/yaml"
        )

        tool_context.save_artifact(
            filename="pubspec.yaml",
            artifact=pubspec_part
        )

        # analysis_options.yaml 생성
        analysis_options_content = """
include: package:flutter_lints/flutter.yaml

linter:
  rules:
    - avoid_empty_else
    - avoid_relative_lib_imports
    - avoid_types_as_parameter_names
    - control_flow_in_finally
    - empty_statements
    - prefer_void_to_null
    - always_declare_return_types
    - camel_case_types
    - cancel_subscriptions
    - directives_ordering
    - prefer_const_constructors
    - prefer_final_fields
    - prefer_final_locals
        """

        analysis_bytes = analysis_options_content.encode("utf-8")
        analysis_part = Part.from_data(
            data=analysis_bytes,
            mime_type="text/yaml"
        )

        tool_context.save_artifact(
            filename="analysis_options.yaml",
            artifact=analysis_part
        )

        # Android 프로젝트 파일 생성
        # 1. android/app/build.gradle
        app_build_gradle_content = """
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new Exception("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.${app_name}"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
        """

        app_build_gradle_bytes = app_build_gradle_content.encode("utf-8")
        app_build_gradle_part = Part.from_data(
            data=app_build_gradle_bytes,
            mime_type="text/x-gradle"
        )

        tool_context.save_artifact(
            filename="android/app/build.gradle",
            artifact=app_build_gradle_part
        )

        # 2. android/build.gradle
        build_gradle_content = """
buildscript {
    ext.kotlin_version = '1.8.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
        """

        build_gradle_bytes = build_gradle_content.encode("utf-8")
        build_gradle_part = Part.from_data(
            data=build_gradle_bytes,
            mime_type="text/x-gradle"
        )

        tool_context.save_artifact(
            filename="android/build.gradle",
            artifact=build_gradle_part
        )

        # 3. android/settings.gradle
        settings_gradle_content = """
include ':app'

def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
def properties = new Properties()

assert localPropertiesFile.exists()
localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }

def flutterSdkPath = properties.getProperty("flutter.sdk")
assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
        """

        settings_gradle_bytes = settings_gradle_content.encode("utf-8")
        settings_gradle_part = Part.from_data(
            data=settings_gradle_bytes,
            mime_type="text/x-gradle"
        )

        tool_context.save_artifact(
            filename="android/settings.gradle",
            artifact=settings_gradle_part
        )

        # 4. MainActivity.kt
        main_activity_content = f"""
package com.example.{app_name.lower().replace('-', '_').replace(' ', '_')}

import io.flutter.embedding.android.FlutterActivity

class MainActivity: FlutterActivity() {{
}}
        """

        main_activity_bytes = main_activity_content.encode("utf-8")
        main_activity_part = Part.from_data(
            data=main_activity_bytes,
            mime_type="text/x-kotlin"
        )

        tool_context.save_artifact(
            filename=f"android/app/src/main/kotlin/com/example/{
                app_name.lower().replace(
                    '-',
                    '_').replace(
                    ' ',
                    '_')}/MainActivity.kt",
            artifact=main_activity_part)

        # 5. AndroidManifest.xml
        manifest_content = f"""<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.{app_name.lower().replace('-', '_').replace(' ', '_')}">
    <application
        android:name="${{applicationName}}"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name">
        <activity
            android:name=".MainActivity"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:exported="true"
            android:hardwareAccelerated="true"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:windowSoftInputMode="adjustResize">
            <meta-data
                android:name="io.flutter.embedding.android.NormalTheme"
                android:resource="@style/NormalTheme" />
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
</manifest>
        """

        manifest_bytes = manifest_content.encode("utf-8")
        manifest_part = Part.from_data(
            data=manifest_bytes,
            mime_type="application/xml"
        )

        tool_context.save_artifact(
            filename="android/app/src/main/AndroidManifest.xml",
            artifact=manifest_part
        )

        # 6. strings.xml (앱 이름 설정)
        strings_content = f"""<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">{app_spec.get("app_name", "Flutter App")}</string>
</resources>
        """

        strings_bytes = strings_content.encode("utf-8")
        strings_part = Part.from_data(
            data=strings_bytes,
            mime_type="application/xml"
        )

        tool_context.save_artifact(
            filename="android/app/src/main/res/values/strings.xml",
            artifact=strings_part
        )

        # 필요한 디렉토리 구조 기록
        directories = [
            "lib/models",
            "lib/controllers",
            "lib/pages",
            "lib/widgets",
            "lib/utils",
            "test",
            "assets/images",
            "app/api/routes",
            "app/models",
            "app/db",
            "app/services",
            "security/reports",
            "android/app/src/main/kotlin",
            "android/app/src/main/res"
        ]

        # 세션 상태에 앱 명세 저장
        tool_context.state["app_spec"] = app_spec
        tool_context.state["app_name"] = app_name
        tool_context.state["directories"] = directories

        return {
            "success": True,
            "app_name": app_name,
            "directories": directories,
            "message": f"'{app_name}' Flutter 프로젝트가 초기화되었습니다."
        }

    except Exception as e:
        logger.error(f"프로젝트 초기화 중 오류 발생: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "message": f"프로젝트 초기화 실패: {str(e)}"
        }


def assemble_flutter_project(tool_context) -> dict:
    """
    생성된 모든 파일을 Flutter 프로젝트 구조로 조립합니다.

    Args:
        tool_context: 도구 컨텍스트

    Returns:
        조립 결과를 포함하는 딕셔너리
    """
    try:
        # 모든 아티팩트 목록 가져오기
        artifacts = tool_context.list_artifacts()

        # main.dart가 없으면 생성
        if "lib/main.dart" not in artifacts:
            app_name = tool_context.state.get("app_name", "flutter_app")

            main_dart_content = f"""
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'controllers/user_controller.dart';
import 'pages/home_page.dart';

void main() {{
  runApp(const MyApp());
}}

class MyApp extends StatelessWidget {{
  const MyApp({{super.key}});

  @override
  Widget build(BuildContext context) {{
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => UserController()),
      ],
      child: MaterialApp(
        title: '{app_name}',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        home: const HomePage(),
      ),
    );
  }}
}}
            """

            main_dart_bytes = main_dart_content.encode("utf-8")
            main_dart_part = Part.from_data(
                data=main_dart_bytes,
                mime_type="text/x-dart"
            )

            tool_context.save_artifact(
                filename="lib/main.dart",
                artifact=main_dart_part
            )

        # README.md가 없으면 생성
        if "README.md" not in artifacts:
            app_name = tool_context.state.get("app_name", "flutter_app")
            app_description = tool_context.state.get("app_spec", {}).get(
                "description", "Flutter application generated by Agent of Flutter"
            )

            readme_content = f"""
# {app_name}

{app_description}

## Getting Started

This project is a Flutter application generated by Agent of Flutter.

### Prerequisites

- Flutter SDK
- Dart
- For the backend:
  - Python 3.10+
  - FastAPI
  - PostgreSQL
  - Redis

### Running the application

1. Clone this repository
2. Run `flutter pub get` to install dependencies
3. Run `flutter run` to start the application

### Running the backend

1. Navigate to the `app` directory
2. Install dependencies with `pip install -r requirements.txt`
3. Start the server with `uvicorn main:app --reload`

## Features

- User management
- [Add other features here]

## Generated by

This application was automatically generated by Agent of Flutter, an ADK-based
multi-agent system for Flutter application generation.
            """

            readme_bytes = readme_content.encode("utf-8")
            readme_part = Part.from_data(
                data=readme_bytes,
                mime_type="text/markdown"
            )

            tool_context.save_artifact(
                filename="README.md",
                artifact=readme_part
            )

        # 성공 응답 반환
        return {
            "success": True,
            "artifact_count": len(artifacts),
            "message": "Flutter 프로젝트 조립이 완료되었습니다."
        }

    except Exception as e:
        logger.error(f"프로젝트 조립 중 오류 발생: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "message": f"프로젝트 조립 실패: {str(e)}"
        }


# FunctionTool 정의
initialize_project_tool = FunctionTool(initialize_project)
assemble_flutter_project_tool = FunctionTool(assemble_flutter_project)


# 메인 오케스트레이터 에이전트 정의
main_orchestrator_agent = Agent(
    name="MainOrchestratorAgent",
    description="전체 Flutter 앱 생성 프로세스를 조율하는 에이전트",
    instruction="이 에이전트는 Flutter 애플리케이션 생성 전체 프로세스를 관리합니다.",
    sub_agents=[
        # 프로젝트 초기화를 담당하는 에이전트 (FunctionTool을 사용하는 간단한 에이전트)
        Agent(
            name="ProjectScaffoldingAgent",
            description="Flutter 프로젝트 기본 구조를 초기화하는 에이전트",
            instruction="""
            Flutter 프로젝트의 기본 구조를 초기화합니다.
            제공된 앱 명세를 확인하고, initialize_project_tool을 호출하여
            pubspec.yaml, analysis_options.yaml 등의 기본 파일을 생성합니다.
            """,
            model=get_agent_config("model_agent")["model"],
            tools=[initialize_project_tool]
        ),

        # 모델 그룹 에이전트
        model_group_agent,

        # API 그룹 에이전트
        api_group_agent,

        # 컨트롤러 그룹 에이전트
        controller_group_agent,

        # 웹뷰 그룹 에이전트
        webview_group_agent,

        # TDD 그룹 에이전트
        tdd_group_agent,

        # 보안 그룹 에이전트
        security_group_agent,

        # Android 그룹 에이전트
        android_group_agent,

        # 최종 프로젝트 조립을 담당하는 에이전트
        Agent(
            name="ProjectAssemblyAgent",
            description="생성된 모든 파일을 최종 Flutter 프로젝트로 조립하는 에이전트",
            instruction="""
            모든 파일 생성 작업이 완료된 후, 파일들을 최종 Flutter 프로젝트 구조로 조립합니다.
            assemble_flutter_project_tool을 호출하여 필요한 추가 파일(예: main.dart)을 생성하고
            Flutter 프로젝트의 최종 형태를 완성합니다.
            """,
            model=get_agent_config("model_agent")["model"],
            tools=[assemble_flutter_project_tool]
        )
    ]
)


def register_agents(app_spec):
    """
    앱 명세에 따라 필요한 모든 에이전트를 등록합니다.

    Args:
        app_spec: 애플리케이션 명세

    Returns:
        업데이트된 메인 오케스트레이터 에이전트
    """
    try:
        # 각 그룹별 에이전트 등록
        updated_model_group_agent = register_model_agents(app_spec)
        updated_api_group_agent = register_api_agents(app_spec)
        updated_controller_group_agent = register_controller_agents(app_spec)
        updated_webview_group_agent = register_webview_agents(app_spec)
        updated_tdd_group_agent = register_tdd_agents(app_spec)
        updated_security_group_agent = register_security_agents(app_spec)
        updated_android_group_agent = register_android_agents(app_spec)

        # 업데이트된 에이전트 목록으로 Agent 생성
        updated_main_orchestrator_agent = Agent(
            name="MainOrchestratorAgent",
            description="전체 Flutter 앱 생성 프로세스를 조율하는 에이전트",
            instruction="이 에이전트는 Flutter 애플리케이션 생성 전체 프로세스를 관리합니다.",
            sub_agents=[
                # 프로젝트 초기화를 담당하는 에이전트
                Agent(
                    name="ProjectScaffoldingAgent",
                    description="Flutter 프로젝트 기본 구조를 초기화하는 에이전트",
                    instruction="""
                    Flutter 프로젝트의 기본 구조를 초기화합니다.
                    제공된 앱 명세를 확인하고, initialize_project_tool을 호출하여
                    pubspec.yaml, analysis_options.yaml 등의 기본 파일을 생성합니다.
                    """,
                    model=get_agent_config("model_agent")["model"],
                    tools=[initialize_project_tool]
                ),

                # 업데이트된 그룹 에이전트들
                updated_model_group_agent,
                updated_api_group_agent,
                updated_controller_group_agent,
                updated_webview_group_agent,
                updated_tdd_group_agent,
                updated_security_group_agent,
                updated_android_group_agent,

                # 최종 프로젝트 조립을 담당하는 에이전트
                Agent(
                    name="ProjectAssemblyAgent",
                    description="생성된 모든 파일을 최종 Flutter 프로젝트로 조립하는 에이전트",
                    instruction="""
                    모든 파일 생성 작업이 완료된 후, 파일들을 최종 Flutter 프로젝트 구조로 조립합니다.
                    assemble_flutter_project_tool을 호출하여 필요한 추가 파일(예: main.dart)을 생성하고
                    Flutter 프로젝트의 최종 형태를 완성합니다.
                    """,
                    model=get_agent_config("model_agent")["model"],
                    tools=[assemble_flutter_project_tool]
                )
            ]
        )

        return updated_main_orchestrator_agent

    except Exception as e:
        logger.error(f"에이전트 등록 중 오류 발생: {str(e)}")
        return main_orchestrator_agent  # 오류 발생 시 기본 에이전트 반환
